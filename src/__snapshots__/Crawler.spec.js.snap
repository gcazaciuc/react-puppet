// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Crawler spec Should be able to construct hierarchical slices 1`] = `
"import { style } from 'typestyle';
const colors = { purpleHeart: '#0000FF', fern: '#008000' };
export const content = style({
    width: '100px',
    height: '100px',
    background: '#0000FF',
    $nest: { '&:hover': { background: '#008000' } }
});
"
`;

exports[`Crawler spec Should be able to construct hierarchical slices 2`] = `
"import * as React from 'react';
import * as componentStyle from './ComponentStyle';
export class Component extends React.Component {
    render() {
        return <p className={componentStyle.content}>Test content</p>;
    }
}
"
`;

exports[`Crawler spec Should be able to parse a simple HTML file and generate the styles & React comps 1`] = `
"import { style } from 'typestyle';
const colors = { purpleHeart: '#0000FF', fern: '#008000' };
export const content = style({
    width: '100px',
    height: '100px',
    background: '#0000FF',
    $nest: { '&:hover': { background: '#008000' } }
});
"
`;

exports[`Crawler spec Should be able to parse a simple HTML file and generate the styles & React comps 2`] = `
"import * as React from 'react';
import * as componentStyle from './ComponentStyle';
export class Component extends React.Component {
    render() {
        return <p className={componentStyle.content}>Test content</p>;
    }
}
"
`;

exports[`Crawler spec Should parse inline styles on elements 1`] = `
"import { style } from 'typestyle';
const colors = { purpleHeart: '#0000FF', fern: '#008000' };
export const content = style({
    width: '100px',
    height: '100px',
    background: '#0000FF',
    $nest: { '&:hover': { background: '#008000' } }
});
"
`;

exports[`Crawler spec Should parse inline styles on elements 2`] = `
"import * as React from 'react';
import * as componentStyle from './ComponentStyle';
export class Component extends React.Component {
    render() {
        return <p className={componentStyle.content}>Test content</p>;
    }
}
"
`;

exports[`Crawler spec Should parse pseudo classes styles on elements 1`] = `
"import { style } from 'typestyle';
const colors = { purpleHeart: '#0000FF', fern: '#008000' };
export const content = style({
    width: '100px',
    height: '100px',
    background: '#0000FF',
    $nest: { '&:hover': { background: '#008000' } }
});
"
`;

exports[`Crawler spec Should parse pseudo classes styles on elements 2`] = `
"import * as React from 'react';
import * as componentStyle from './ComponentStyle';
export class Component extends React.Component {
    render() {
        return <p className={componentStyle.content}>Test content</p>;
    }
}
"
`;

exports[`Crawler spec Should transform relative URLs to absolute 1`] = `
"import { style } from 'typestyle';
const colors = {};
export const imgCls = style({});
"
`;

exports[`Crawler spec Should transform relative URLs to absolute 2`] = `
"import * as React from 'react';
import * as componentStyle from './ComponentStyle';
export class Component extends React.Component {
    render() {
        return (
            <p className={componentStyle.imgCls}>
                <img
                    src={
                        'file:///home/gcazaciuc/slice-machine/src/fixtures/absolute-urls.html/img.jpg'
                    }
                    className={componentStyle.imgCls}
                />
            </p>
        );
    }
}
"
`;
